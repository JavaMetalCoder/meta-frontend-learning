/* ðŸŸ¢ 1. Immagine fluida base
Obiettivo: Rendere un'immagine responsive in una pagina HTML.

âœ… Crea un file HTML con unâ€™immagine molto grande.
ðŸŽ¯ Usa max-width: 100% e height: auto per farla adattare allo schermo. */

/* img {
  max-width: 100%;
  height: auto;
} */

/* ðŸŸ¢ 2. Layout con griglia flessibile
Obiettivo: Usare le griglie flessibili con le percentuali.

âœ… Crea 3 colonne affiancate in un contenitore.
ðŸŽ¯ Usa display: flex o float con larghezze in % (es: 33.33%).
ðŸ“± Verifica che si adattino su schermi piccoli (e magari vanno in colonna). 

.item {
  border: solid 2px black;
  width: 33%;
  height: 150px;
  text-align: center;
  line-height: 150px;
  
}

.cont {
  display: flex;
  flex-direction: row;
  justify-content: center;
  flex-wrap: wrap;
}

@media (max-width: 600px) {
  .item {
    width: 100%;
  }
  
} */

/* ðŸŸ¡ 3. Aggiungi una media query

Obiettivo: Applicare uno stile diverso su schermi piccoli.

âœ… Prendi una pagina HTML con del testo.
ðŸŽ¯ Aggiungi una media query che cambia il colore del background e la dimensione del font sotto i 600px */

/* body {
  background-color: aqua;
  font-size: 25px;
}

p {
  text-align: center;
}


@media (max-width: 768px) {
  body {
    background-color: blue;
    font-size: 16px;
  }
  
} */

/* ðŸŸ¡ 4. Griglia fissa vs fluida

Obiettivo: Confrontare due tipi di griglia.

âœ… Crea due layout:

    uno con width: 400px fissa per ogni colonna,

    uno con width: 33.33%.

ðŸŽ¯ Provali su desktop e mobile per vedere le differenze. 

.fissa {
  width: 400px;

}

.fluida {
  width: 33%;

}

div > div {
  border: solid 2px blueviolet;
} */

/* ðŸŸ¡ 5. Card responsive

Obiettivo: Creare una card (immagine + testo) che si adatta.

âœ… Crea una card con immagine, titolo, descrizione.
ðŸŽ¯ Imposta una griglia responsive a 2 colonne per desktop e 1 colonna per mobile con flex-wrap e media queries. 


.cont {
  display: flex;
  justify-content: center;
  padding: 20px;
  gap: 10px;
  width: 100%;
}
.card {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  width: 50%;
}

@media (max-width: 600px) {
  .cont {
    display: flex;
    justify-content: center;
    padding: 20px;
    gap: 10px;
    width: 100%;
    flex-wrap: wrap;

  }
  
} */

/* ðŸ”´ 6. Crea un layout a 3 sezioni + breakpoints

Obiettivo: Sito con header, main e sidebar responsive.

âœ… Layout:

    header in alto 100%

    main (contenuto) e aside (barra laterale) affiancati su desktop

    sovrapposti su mobile

ðŸŽ¯ Usa flex o grid con @media (max-width: 600px) per cambiare disposizione. 

header {
  display: flex;
  justify-content: flex-start;
  align-items: center;
  
}

nav > ul  {
  display: flex;
  gap: 20px;
  justify-content: space-around;
  align-items: center;
  
}

nav > ul > li {
  list-style: none;

}

.cont {
  display: flex;
  justify-content: space-between;

}

@media (max-width: 600px) {
  .cont {
    flex-direction: column;
  }
  
} */

/* ðŸ”´ 7. Simulatore Breakpoint

Obiettivo: Allenarti con piÃ¹ punti di rottura

âœ… Crea un layout con testo e sfondi colorati.
ðŸŽ¯ Aggiungi 3 breakpoint:

    sotto 500px â†’ sfondo rosso

    tra 500px e 900px â†’ verde

    sopra 900px â†’ blu */

    body {
      background-color: purple; /* fallback */
    }
    
    
    @media (min-width: 901px) {
      body {
        background-color: blue;
      }
    }
    
    
    @media (min-width: 501px) and (max-width: 900px) {
      body {
        background-color: green;
      }
    }
    
    
    @media (max-width: 500px) {
      body {
        background-color: red;
      }
    }
    